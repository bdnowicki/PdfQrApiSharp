name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Test with coverage
      run: |
        dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        Write-Host "Listing TestResults directory:"
        Get-ChildItem -Path "tests/PdfQrApiSharp.Tests/TestResults" -Recurse
        $coverageFile = Get-ChildItem -Path "tests/PdfQrApiSharp.Tests/TestResults" -Filter "coverage.json" -Recurse | Select-Object -First 1
        if ($null -eq $coverageFile) {
          Write-Error "Coverage file not found"
          exit 1
        }
        Write-Host "Coverage file found at: $($coverageFile.FullName)"
        $coverageJson = Get-Content $coverageFile.FullName -Raw | ConvertFrom-Json
        Write-Host "Raw coverage data: $($coverageJson | ConvertTo-Json -Depth 10)"
        
        # Calculate total lines and covered lines
        $totalLines = 0
        $coveredLines = 0
        
        foreach ($file in $coverageJson."PdfQrApiSharp.dll".PSObject.Properties) {
            foreach ($class in $file.Value.PSObject.Properties) {
                foreach ($method in $class.Value.PSObject.Properties) {
                    foreach ($line in $method.Value.Lines.PSObject.Properties) {
                        $totalLines++
                        if ($line.Value -gt 0) {
                            $coveredLines++
                        }
                    }
                }
            }
        }
        
        $coverage = if ($totalLines -gt 0) { [math]::Round(($coveredLines / $totalLines) * 100, 2) } else { 0 }
        Write-Host "Coverage percentage: $coverage% (Covered: $coveredLines, Total: $totalLines)"
        
        if ($coverage -lt 95) {
            Write-Error "Test coverage ($coverage%) is below the required 95% threshold"
            exit 1
        }
      shell: pwsh
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage.json
          **/coverage.cobertura.xml
        retention-days: 5

    - name: Pack
      run: dotnet pack --configuration Release --no-build

    - name: Push to NuGet
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate 